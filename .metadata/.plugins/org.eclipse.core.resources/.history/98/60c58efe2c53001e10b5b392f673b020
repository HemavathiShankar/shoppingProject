package com.example.orderservice;

import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.time.Instant;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.web.client.RestTemplate;

import com.example.orderservice.entity.Order;
import com.example.orderservice.external.client.PaymentService;
import com.example.orderservice.external.client.ProductService;
import com.example.orderservice.model.OrderResponse;
import com.example.orderservice.model.ProductBody;
import com.example.orderservice.repo.OrderRepo;
import com.example.orderservice.service.OrderService;
import com.example.orderservice.service.OrderServiceImpl;
import com.google.common.base.Optional;

@SpringBootTest
class OrderServiceApplicationTests {

	@Mock
	private OrderRepo repo;
	
	@Mock
	private ProductService productService;
	
	@Mock
	private PaymentService paymentService;
	
	@Mock
	private RestTemplate restTemplate;
	
	@InjectMocks
	OrderService service=new OrderServiceImpl();
	
	@Test
	void get_order_test() {
		Order order=getMockOrder();
		Productbody pro=mockProductResponse();
		//mocking
		doReturn(Optional.of(order)).when(repo.findById(anyLong()));
		
		when(restTemplate.getForObject("http://PRODUCT-SERVICE/product/getProducts/"+order.
				getProductId(),ProductBody.class)).thenReturn(getProductResponse());
		OrderResponse ordBody=service.getOrderDetails(1);
		verify(repo.findById(anyLong()),times(1));
		
		
	}

	private ProductBody mockProductResponse() {
		// TODO Auto-generated method stub
		return ;
	}

	private Order getMockOrder() {
		// TODO Auto-generated method stub
		return Order.builder().amount(1000).productId(101).
				orderDate(Instant.now()).orderStatus("placed").quantity(5).build();
	}
	
	

}
